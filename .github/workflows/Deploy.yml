name: Deploy Workflow

# Step 1: Choose the branch or branches you want to run this workflow
on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    steps:
      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 2: Decode Google services configuration file
      - name: Add secrets
        run: |
          echo $SIGNING_STORE_FILE | base64 -d > app/key.jks
          mkdir -p app/src/debug/dev/
          echo $FIREBASE_CONFIG_DEV_DEBUG | base64 -d > app/src/debug/dev/google-services.json
          mkdir -p app/src/release/dev/
          echo $FIREBASE_CONFIG_DEV_RELEASE | base64 -d > app/src/release/dev/google-services.json
          mkdir -p app/src/debug/qa/
          echo $FIREBASE_CONFIG_QA_DEBUG | base64 -d > app/src/debug/qa/google-services.json
          mkdir -p app/src/release/qa/
          echo $FIREBASE_CONFIG_QA_RELEASE | base64 -d > app/src/release/qa/google-services.json
          mkdir -p app/src/debug/prod/
          echo $FIREBASE_CONFIG_PROD_DEBUG | base64 -d > app/src/debug/prod/google-services.json
          mkdir -p app/src/release/prod/
          echo $FIREBASE_CONFIG_PROD_RELEASE | base64 -d > app/src/release/prod/google-services.json
        env:
          SIGNING_STORE_FILE: ${{ secrets.SIGNING_STORE_FILE }}
          FIREBASE_CONFIG_DEV_DEBUG: ${{ secrets.FIREBASE_CONFIG_DEV_DEBUG }}
          FIREBASE_CONFIG_DEV_RELEASE: ${{ secrets.FIREBASE_CONFIG_DEV_RELEASE }}
          FIREBASE_CONFIG_QA_DEBUG: ${{ secrets.FIREBASE_CONFIG_QA_DEBUG }}
          FIREBASE_CONFIG_QA_RELEASE: ${{ secrets.FIREBASE_CONFIG_QA_RELEASE }}
          FIREBASE_CONFIG_PROD_DEBUG: ${{ secrets.FIREBASE_CONFIG_PROD_DEBUG }}
          FIREBASE_CONFIG_PROD_RELEASE: ${{ secrets.FIREBASE_CONFIG_PROD_RELEASE }}

      # Step 2: Decode local.properties configuration file
      - name: Decode local.properties
        run: |
          cat > local.properties << ENDOFFILE

          marvel.key.public=${{ secrets.MARVEL_KEY_PUBLIC }}
          marvel.key.private=${{ secrets.MARVEL_KEY_PRIVATE }}

          signing.key.alias=${{ secrets.SIGNING_KEY_ALIAS }}
          signing.key.password=${{ secrets.SIGNING_KEY_APASSWORD }}
          signing.store.file=key.jks
          signing.store.password=${{ secrets.SIGNING_STORE_PASSWORD }}
          ENDOFFILE

      # Step 3: Decode the service account json key, needed on the next job
      - name: Decode service account key
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
        run: echo $SERVICE_ACCOUNT > app/service-account-key.json

      # Step 4: Publish the APK to the Play Store using the release keystore
      - name: Publish APK
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew publishStagingRelease
