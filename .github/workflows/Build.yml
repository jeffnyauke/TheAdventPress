name: Testing Workflow

# Step 1: Choose the branch or branches you want to run this workflow
on:
  push:
    branches:
      - master

jobs:
  testing:
    name: Lint Check and Testing

    runs-on: ubuntu-latest

    steps:
      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Add secrets
        run: |
          echo $SIGNING_STORE_FILE | base64 -d > app/key.jks
          mkdir -p app/src/debug/dev/
          echo $FIREBASE_CONFIG_DEV_DEBUG | base64 -d > app/src/debug/dev/google-services.json
          mkdir -p app/src/release/dev/
          echo $FIREBASE_CONFIG_DEV_RELEASE | base64 -d > app/src/release/dev/google-services.json
          mkdir -p app/src/debug/qa/
          echo $FIREBASE_CONFIG_QA_DEBUG | base64 -d > app/src/debug/qa/google-services.json
          mkdir -p app/src/release/qa/
          echo $FIREBASE_CONFIG_QA_RELEASE | base64 -d > app/src/release/qa/google-services.json
          mkdir -p app/src/debug/prod/
          echo $FIREBASE_CONFIG_PROD_DEBUG | base64 -d > app/src/debug/prod/google-services.json
          mkdir -p app/src/release/prod/
          echo $FIREBASE_CONFIG_PROD_RELEASE | base64 -d > app/src/release/prod/google-services.json
        env:
          SIGNING_STORE_FILE: ${{ secrets.SIGNING_STORE_FILE }}
          FIREBASE_CONFIG_DEV_DEBUG: ${{ secrets.FIREBASE_CONFIG_DEV_DEBUG }}
          FIREBASE_CONFIG_DEV_RELEASE: ${{ secrets.FIREBASE_CONFIG_DEV_RELEASE }}
          FIREBASE_CONFIG_QA_DEBUG: ${{ secrets.FIREBASE_CONFIG_QA_DEBUG }}
          FIREBASE_CONFIG_QA_RELEASE: ${{ secrets.FIREBASE_CONFIG_QA_RELEASE }}
          FIREBASE_CONFIG_PROD_DEBUG: ${{ secrets.FIREBASE_CONFIG_PROD_DEBUG }}
          FIREBASE_CONFIG_PROD_RELEASE: ${{ secrets.FIREBASE_CONFIG_PROD_RELEASE }}

      # Step 2: Decode local.properties configuration file
      - name: Decode local.properties
        run: |
          cat > local.properties << ENDOFFILE

          marvel.key.public=${{ secrets.MARVEL_KEY_PUBLIC }}
          marvel.key.private=${{ secrets.MARVEL_KEY_PRIVATE }}

          signing.key.alias=${{ secrets.SIGNING_KEY_ALIAS }}
          signing.key.password=${{ secrets.SIGNING_KEY_APASSWORD }}
          signing.store.file=key.jks
          signing.store.password=${{ secrets.SIGNING_STORE_PASSWORD }}
          ENDOFFILE

      # Step 3: Check the code with ktlint, you can remove this job if you don't use ktlint
      - name: Run Kotlin Linter
        run: ./gradlew ktlint

      # Step 3: Check the code with Android linter
      - name: Run Android Linter
        run: ./gradlew lintqaDebug

      # Step 4: Yun your unit tests
      - name: Run Unit Tests
        run: ./gradlew testqaDebugUnitTest

      # Step 4: Assemble debug apk to send to firebase test lab
      - name: Assemble Debug APK
        run: ./gradlew assembleqaDebug

      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: app
          path: app/build/outputs/apk/debug/app-debug.apk

      # Step 4: Assemble debug test apk to send to firebase test lab
      - name: Assemble Debug Test APK
        run: ./gradlew assembleqaDebugAndroidTest

      # Step 4: Run instrumented tests on firebase test lab
      - name: Run tests on Firebase Test Lab
        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
        with:
          arg-spec: '.github/configs/test-lab-config-qa.yml:android-pixel-4'
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests,uitests
          name: codecov-umbrella
          fail_ci_if_error: true
